# Классы это шаблоны для обьектов
# Из одного класса можно создавать экземпляры обьектов
# Экземпляры могут иметь собственные атрибуты
# Экземпляры наследуют все атрибуты классов

class Car:
    def move(self):  # self это указание на определённый экземпляр класса Car
        print('Car is moving')

    def stop(self):  # Функция будет вызываться для конкретного экземплярва класса
        print('Car stopped')  # Наследуется всеми экземплярами класса


my_car = Car()  # my_car - экземпляр класса Car. Car является функцией конструктором
my_car.move()  # Обращение к методам наследованным от класса Car
# При этом my_car выступает аргументом в методе move. Так как в классе Car прописано Self

# Магический метод __init__. Это ключевая функция конструктор
# Собственные атрибуты экземпляров определяются с помощью функции __init__


class Comment:
    def __init__(self, text):  # Является функцией конструктором для класса
        self.text = text
        self.votes_qty = 0

    def upvote(self):         # Является методом для класса
        self.votes_qty += 1


firs_comment = Comment('First comment')
"""
Пошаговое обьяснение проиходящего:
1 - firs_comment = Comment('First comment') Пайтон сздаёт новый обьект в памяти
2 - firs_comment передаентся в функцию init класса Comment как параметр self
3 - ('First comment') передаётся как значение следующего параметра text
4 - Внутри функции init для созданного обьекта firs_comment Пайтон добавляет два атрибута (text, votes_qty) и присваивает им указанные значения
5 - В итоге мы можем вызывать методы класса Comment для экземпляра firs_comment
"""
